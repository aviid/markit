
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author aviid
 */
public class DialogReturnItems extends javax.swing.JDialog {
SimpleDateFormat df = new SimpleDateFormat("dd-MMM-yyyy");
SimpleDateFormat dft = new SimpleDateFormat("dd-MMM-yyyy hh:mm a");
SimpleDateFormat tt = new SimpleDateFormat("hh:mm a");

    /**
     * Creates new form DialogRuturnItems
     */
    public DialogReturnItems(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        loadItems();
    }
    
    DBEngine db = new DBEngine();
    Connection conn = DBEngine.runConnect();
    
    public void loadItems(){
        try{
            String tableName = "ss_itemtype";
            String columns = "*";
            String where = "";
            String order = " order by itemName";
            
            ResultSet rs = db.runSelect(tableName, columns, where, order);
            while(rs.next()){
                cbItem.addItem(rs.getString("itemName"));
            }
            
        }catch(Exception exp){
            exp.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbItem = new javax.swing.JComboBox();
        txtQty = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        cbReasons = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Return Items");
        setResizable(false);

        jLabel1.setText("Item:");

        jLabel2.setText("Quantity:");

        jButton1.setText("Return Item");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        cbReasons.setEditable(true);
        cbReasons.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Damaged", "Expired", "Fake", "Mistake" }));

        jLabel3.setText("Reason:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtQty, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                    .addComponent(cbItem, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbReasons, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbReasons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try{
            
            String item     = cbItem.getSelectedItem().toString();
            String qty      = txtQty.getText();
            int oldQty      = getSoldQty(item, qty);
            int newQty1     = oldQty-Integer.parseInt(qty);
            String date     = df.format(new Date());
            String reason   = cbReasons.getSelectedItem().toString();
            
            String tbNames  = "SS_STOCKED";
            String tbCols[] = {"ITM_QTY"};
            int oldQtys     = getStockQty(item);
            int newQty2     = oldQtys+Integer.parseInt(qty);
            String tbVals[] = {""+newQty2};
            String wheres   = "ITM_NAME = "+item;
            
            PreparedStatement preState1 = conn.prepareStatement("UPDATE SS_STOCKED SET ITM_QTY = ? WHERE ITM_NAME = ?");
            preState1.setString(1, ""+newQty2);
            preState1.setString(2, item);
            preState1.execute();
            
            //Inserting into return table
            String tbName      = "SS_RETURN";
            int sell            = getSell(item, Integer.parseInt(qty));
            int cost            = getCost(item, Integer.parseInt(qty));
            
            String tbCol[]     = {"TIME","NOW","ITEM","QTY", "AMT","COST","REASON"};
            String tbVal[]     = { df.format(new Date()), tt.format(new Date()),  item,  qty,""+sell,""+cost, reason };
            
            db.runInsert(tbName, tbCol, tbVal);
            JOptionPane.showMessageDialog(rootPane, "Item return to store successfully");
            
        }catch(Exception exp){
            exp.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    public int getSoldQty(String item, String qty) throws Exception{
        String tbName   = "SS_SOLD";
        String tbCols   = "*";
        String where    = "ITEMNAME ='"+item+"' AND QTY>="+qty;
        String order    = "";
        ResultSet rs    = db.runSelect(tbName, tbCols, where, order);   
        if(rs.next())
            return rs.getInt("QTY");
        else
            return rs.getInt("QTY");
        
    }
    
    public int getStockQty(String item)throws Exception{
        String tbName   = "SS_SOLD";
        String tbCols   = "*";
        String where    = "ITEMNAME ='"+item+"'";
        String order    = "";
        ResultSet rs    = db.runSelect(tbName, tbCols, where, order);   
        if(rs.next())
            return rs.getInt("QTY");
        else
            return rs.getInt("QTY");
    }
    
    public int getSell(String item, int qnty)throws Exception{
        String tbName   = "SS_ITEMTYPE";
        String tbCols   = "*";
        String where    = "ITEMNAME ='"+item+"'";
        String order    = "";
        
        int amt         = 0;
        int totAmt      = 0;
        
        ResultSet rs    = db.runSelect(tbName, tbCols, where, order);   
        if(rs.next()){
            amt     = rs.getInt("SELLINGPRICE");
            totAmt  = amt*qnty;
        }
        
        return totAmt;
    }
    
    public int getCost(String item, int qnty)throws Exception{
        String tbName   = "SS_ITEMTYPE";
        String tbCols   = "*";
        String where    = "ITEMNAME ='"+item+"'";
        String order    = "";
        
        int amt         = 0;
        int totAmt      = 0;
        
        ResultSet rs    = db.runSelect(tbName, tbCols, where, order);   
        if(rs.next()){
            amt     = rs.getInt("COSTPRICE");
            totAmt  = amt*qnty;
        }
        
        return totAmt;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DialogReturnItems.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DialogReturnItems.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DialogReturnItems.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DialogReturnItems.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DialogReturnItems dialog = new DialogReturnItems(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cbItem;
    private javax.swing.JComboBox cbReasons;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField txtQty;
    // End of variables declaration//GEN-END:variables
}
